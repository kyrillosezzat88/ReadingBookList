{"version":3,"sources":["Reducers/BookReducer.js","Context/BookContext.js","Components/Navbar.js","Components/BookDetails.js","Components/BookList.js","Components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["BookReducer","state","action","type","Title","book","title","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","Books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","BookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SACaA,EAAc,SAACC,EAAQC,GAChC,OAAOA,EAAOC,MACV,IAAK,WACD,MAAM,GAAN,mBAAWF,GAAX,CAAmB,CACfG,MAAMF,EAAOG,KAAKC,MAClBC,OAAOL,EAAOG,KAAKE,OACnBC,GAAGC,SAEP,IAAK,cACD,OAAOR,EAAMS,QAAO,SAAAL,GAAI,OAAGA,EAAKG,KAAON,EAAOM,MAClD,QACI,OAAOP,ICVVU,EAAcC,0BAqBZC,EApBa,SAACC,GAAW,IAAD,EACRC,qBAAWf,EAAc,IAAK,WACrD,IAAMgB,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHZ,mBAC5BK,EAD4B,KACpBC,EADoB,KAcnC,OAHAC,qBAAU,WACNN,aAAaO,QAAQ,QAAUL,KAAKM,UAAUJ,MAChD,CAACA,IAEC,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAACN,QAAQC,aACjCR,EAAMc,WCPJC,EATA,WAAK,IACTR,EAASS,qBAAWnB,GAApBU,MACP,OACI,yBAAKU,UAAU,UACX,4CACA,iDAAuBV,EAAMW,OAA7B,8BCGGC,EATM,SAAC,GAAW,IAAV5B,EAAS,EAATA,KACZiB,EAAYQ,qBAAWnB,GAAvBW,SACP,OACI,wBAAIY,QAAS,kBAAKZ,EAAS,CAACnB,KAAK,cAAgBK,GAAGH,EAAKG,OACrD,yBAAKuB,UAAU,SAAS1B,EAAKD,OAC7B,yBAAK2B,UAAU,UAAU1B,EAAKE,UCU3B4B,EAdG,WAAM,IACbd,EAASS,qBAAWnB,GAApBU,MACP,OAAOA,EAAMW,OACT,yBAAKD,UAAU,aACX,4BACKV,EAAMe,KAAI,SAAA/B,GACP,OAAO,kBAAC,EAAD,CAAaA,KAAMA,EAAMgC,IAAKhC,EAAKG,UAKtD,yBAAKuB,UAAU,SAAf,qCCWOO,EAtBE,WAAM,IACZhB,EAAYQ,qBAAWnB,GAAvBW,SADW,EAESiB,mBAAS,IAFlB,mBAEXjC,EAFW,KAEHkC,EAFG,OAGWD,mBAAS,IAHpB,mBAGXhC,EAHW,KAGFkC,EAHE,KAYlB,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACFtB,EAAS,CAACnB,KAAK,WAAaE,KAAK,CAC7BC,QAAOC,YAEXiC,EAAS,IACTC,EAAU,MAIN,2BAAOtC,KAAK,OAAOwB,MAAOrB,EAAOuC,YAAY,aACzCC,SAAU,SAACH,GAAD,OAAKH,EAASG,EAAEI,OAAOpB,QAAQqB,UAAQ,IACrD,2BAAO7C,KAAK,OAAOwB,MAAOpB,EAAQsC,YAAY,cAC1CC,SAAU,SAACH,GAAD,OAAMF,EAAUE,EAAEI,OAAOpB,QAAQqB,UAAQ,IACvD,2BAAO7C,KAAK,SAASwB,MAAM,eCFxBsB,E,iLAZX,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAPQmB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1b90ad36.chunk.js","sourcesContent":["import uuid from 'uuid/v1'\r\nexport const BookReducer = (state , action) =>{\r\n    switch(action.type) {\r\n        case \"ADD_BOOK\" :\r\n            return [...state , {\r\n                Title:action.book.title,\r\n                author:action.book.author,\r\n                id:uuid()\r\n            }];\r\n            case \"REMOVE_BOOK\" :\r\n                return state.filter(book=> book.id !== action.id);\r\n            default :\r\n                return state;\r\n    }\r\n}","import React , {createContext , useReducer ,useEffect} from 'react'\r\nimport { BookReducer } from '../Reducers/BookReducer';\r\nexport const BookContext = createContext();\r\nconst BookContextProvider = (props) => {\r\n    const [Books , dispatch] = useReducer(BookReducer , [] , ()=>{\r\n        const localData = localStorage.getItem('books');\r\n        return localData ? JSON.parse(localData) : [];\r\n    })\r\n    // const addBook = (Title , author)=>{\r\n    //     SetBook([...Books , {Title , author , id:uuid()}]);\r\n    // }\r\n    // const removeBook = (id)=>{\r\n    //     SetBook(Books.filter(book=> book.id !== id));\r\n    // }\r\n    useEffect(()=>{\r\n        localStorage.setItem('books' , JSON.stringify(Books))\r\n    },[Books])\r\n    return(\r\n        <BookContext.Provider value={{Books , dispatch}}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n    )\r\n}\r\nexport default BookContextProvider;","import React , {useContext} from 'react';\r\nimport {BookContext} from '../Context/BookContext';\r\n\r\nconst Navbar = ()=>{\r\n    const {Books} = useContext(BookContext);\r\n    return(\r\n        <div className='Navbar'>\r\n            <h1>Reading List</h1>\r\n            <p>Currently you have {Books.length} books to get through...</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport {BookContext} from '../Context/BookContext'\r\nconst BookDetails  = ({book}) =>{\r\n    const {dispatch} = useContext(BookContext);\r\n    return(\r\n        <li onClick={()=> dispatch({type:'REMOVE_BOOK' , id:book.id}) }>\r\n            <div className='title'>{book.Title}</div>\r\n            <div className='author'>{book.author}</div>\r\n        </li>\r\n    )\r\n}\r\nexport default BookDetails;","import React , {useContext} from 'react'\r\nimport {BookContext} from '../Context/BookContext'\r\nimport BookDetails from './BookDetails'\r\nconst BookList  = () =>{\r\n    const {Books} = useContext(BookContext);\r\n    return Books.length ? (\r\n        <div className='book-list'>\r\n            <ul>\r\n                {Books.map(book=>{\r\n                    return(<BookDetails book={book} key={book.id}/>);\r\n                })}\r\n            </ul>\r\n        </div>\r\n    ) : (\r\n        <div className='empty'>No Books To Read,Hello Free Time</div>\r\n    )\r\n}\r\nexport default BookList;","import React , {useState , useContext} from 'react'\r\nimport {BookContext} from '../Context/BookContext'\r\n\r\nconst BookForm = () =>{\r\n    const {dispatch} = useContext(BookContext);\r\n    const [title , setTitle] = useState('');\r\n    const [author , setAuthor] = useState('');\r\n    const handelSubmit = (e) =>{\r\n        e.preventDefault();\r\n        dispatch({type:'ADD_BOOK' , book:{\r\n            title, author \r\n        }})\r\n        setTitle('');\r\n        setAuthor('');\r\n    }\r\n    return(\r\n        <form onSubmit={handelSubmit}>\r\n            <input type='text' value={title} placeholder='Book Title' \r\n                onChange={(e)=>setTitle(e.target.value)} required />\r\n            <input type='text' value={author} placeholder='Book Author'\r\n                onChange={(e)=> setAuthor(e.target.value)} required />\r\n            <input type='submit' value='Add Book' />\r\n        </form>\r\n    )\r\n}\r\nexport default BookForm;","import React, {Component} from 'react';\nimport BookContextProvider from './Context/BookContext'\nimport Navbar from './Components/Navbar'\nimport BookList from './Components/BookList'\nimport BookForm from './Components/BookForm';\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <BookContextProvider>\n          <Navbar/>\n          <BookList/>\n          <BookForm/>\n        </BookContextProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}